template = { "{" ~ debug_flag? ~ operation_list? ~ "}" }

debug_flag = { "!" }

operation_list = { operation ~ ("|" ~ operation)* }

operation = {
    shorthand_range
  | shorthand_index
  | split
  | join
  | substring
  | replace
  | upper
  | lower
  | trim
  | strip
  | append
  | prepend
  | strip_ansi
  | filter
  | filter_not
  | slice
  | regex_extract
  | map
  | sort
  | reverse
  | unique
  | pad
}

shorthand_index = { number }
shorthand_range = {
    range_to_inclusive
  | range_to
  | range_inclusive
  | range_exclusive
  | range_from
  | range_full
}

// Order of operations matter
regex_extract = { "regex_extract" ~ ":" ~ regex_arg ~ (":" ~ number)? }
filter_not    = { "filter_not" ~ ":" ~ regex_arg }
filter        = { "filter" ~ ":" ~ regex_arg }
strip_ansi    = { "strip_ansi" }
map           = { "map" ~ ":" ~ map_operation }
split         = { "split" ~ ":" ~ split_arg ~ ":" ~ range_spec? }
substring     = { "substring" ~ ":" ~ range_spec }
replace       = { "replace" ~ ":" ~ sed_string }
append        = { "append" ~ ":" ~ arg }
prepend       = { "prepend" ~ ":" ~ arg }
upper         = { "upper" }
lower         = { "lower" }
trim          = { "trim" ~ (":" ~ direction)? }
strip         = { "strip" ~ ":" ~ arg }
join          = { "join" ~ ":" ~ arg }
slice         = { "slice" ~ ":" ~ range_spec }
sort          = { "sort" ~ (":" ~ sort_direction)? }
reverse       = { "reverse" }
unique        = { "unique" }
pad           = { "pad" ~ ":" ~ number ~ (":" ~ pad_char)? ~ (":" ~ direction)? }

// Direction specifiers
direction      =  { "left" | "right" | "both" }
sort_direction =  { "asc" | "desc" }
pad_char       = @{ (escaped_char | normal_char)+ }

// Map operation
map_operation       = { "{" ~ map_operation_list ~ "}" }
map_operation_list  = { map_inner_operation ~ ("|" ~ map_inner_operation)* }
map_inner_operation = {
    strip_ansi
  | substring
  | replace
  | append
  | prepend
  | upper
  | lower
  | trim
  | strip  
  | pad
  | join
  | slice
  | sort
  | reverse
  | unique
  | map_regex_extract
  | map_filter_not
  | map_filter
}

// Map-specific operations that use map_regex_arg
map_regex_extract = { "regex_extract" ~ ":" ~ map_regex_arg ~ (":" ~ number)? }
map_filter_not    = { "filter_not" ~ ":" ~ map_regex_arg }
map_filter        = { "filter" ~ ":" ~ map_regex_arg }

// Regular arguments
arg          = { (escaped_char | normal_char | " " | "\t")* }
normal_char  = { !(":" | "|" | "}" | "{" | "\\") ~ ANY }
escaped_char = { "\\" ~ (":" | "|" | "\\" | "n" | "t" | "r" | "/" | "{" | "}") }

// Split arguments - allow pipes unless followed by operation names
split_arg          = @{ (split_escaped_char | split_pipe_or_char)* }
split_pipe_or_char =  { split_pipe | split_normal_char }
split_pipe         =  { "|" ~ !operation_name }
split_normal_char  =  {
    !(":" ~ (operation_name | range_spec | number)) ~ !("|" ~ operation_name) ~ !("}" ~ (EOI | !(split_any_char*))) ~ ANY
}
split_escaped_char =  { "\\" ~ ANY }
split_any_char     =  { ANY }

// Regex arguments - allow pipes unless followed by operation names, and handle braces
regex_arg          = @{ (regex_escaped_char | regex_pipe_or_char)* }
regex_pipe_or_char =  { regex_pipe | regex_normal_char }
regex_pipe         =  { "|" ~ !operation_name }
regex_normal_char  =  {
    !(":" ~ (operation_name | range_spec | number)) ~ !("|" ~ operation_name) ~ !("}" ~ (EOI | "|")) ~ ANY
}
regex_escaped_char =  { "\\" ~ ANY }

// Regex arguments for map operations (improved to handle braces in regex)
map_regex_arg          = @{ (map_regex_escaped_char | map_regex_balanced_brace | map_regex_pipe_or_char)* }
map_regex_pipe_or_char =  { map_regex_pipe | map_regex_normal_char }
map_regex_pipe         =  { "|" ~ !operation_name }
map_regex_balanced_brace = { "{" ~ (!("}" ~ &("|" | "}" | EOI | (":" ~ number))) ~ ANY)* ~ "}" }
map_regex_normal_char  =  {
    !(":" ~ (operation_name | range_spec | number)) ~ !("|" ~ operation_name) ~ !("{" | ("}" ~ &("|" | "}" | EOI | (":" ~ number)))) ~ ANY
}
map_regex_escaped_char =  { "\\" ~ ANY }

// Operation names for lookahead
operation_name = {
    "split"
  | "join"
  | "substring"
  | "replace"
  | "upper"
  | "lower"
  | "trim"
  | "strip"
  | "append"
  | "prepend"
  | "strip_ansi"
  | "filter_not"
  | "filter"
  | "slice"
  | "regex_extract"
  | "map"
  | "sort"
  | "reverse"
  | "unique"
  | "pad"
}

// Sed strings (preserve sed/regex escape sequences)
sed_string       =  { "s/" ~ sed_pattern ~ "/" ~ sed_replacement ~ "/" ~ sed_flags? }
sed_pattern      = @{ sed_content }
sed_replacement  = @{ sed_content }
sed_content      =  { (sed_escaped_char | sed_normal_char)* }
sed_normal_char  =  { !("/" | "\\") ~ ANY }
sed_escaped_char =  { "\\" ~ ANY }
sed_flags        = @{ ASCII_ALPHA* }

// Range specifications
range_spec = {
    range_to_inclusive
  | range_to
  | range_inclusive
  | range_exclusive
  | range_from
  | range_full
  | index
}

range_inclusive    = { number? ~ "..=" ~ number? }
range_exclusive    = { number? ~ ".." ~ number? }
range_from         = { number ~ ".." }
range_to           = { ".." ~ number }
range_to_inclusive = { "..=" ~ number }
range_full         = { ".." }
index              = { number }

number = @{ "-"? ~ ASCII_DIGIT+ }
